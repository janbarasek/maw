display2d:false;

print (diff(f(x,y),x)=0);
print (diff(f(x,y),y)=0);
if (diff(f(x,y),x)=0) or (diff(f(x,y),y)=0) then error ("not_two_vars");

test_freeofxy(expr):= freeof(x,expr) and freeof(y, expr);

/* function find_point           */
/* converts [y=6,x=5] into [5,6] if this point belogns to the domain of f(x,y)*/
find_point(point_list):=
([x1,y1,out],
 print("point",point_list),
 if lhs(point_list[1])=y then
  (
    temp:point_list[2],
    point_list[2]:point_list[1],
    point_list[1]:temp
   ),
 if test_freeofxy(rhs(point_list[1])) 
    and test_freeofxy(rhs(point_list[2])) 
    and lhs(point_list[1])=x 
    and lhs(point_list[2])=y 
    and freeof(%i,point_list[1])
    and freeof(%i,point_list[2])
    and (imagpart(ratsimp(rectform(rhs(point_list[1]))))=0)
    and (imagpart(ratsimp(rectform(rhs(point_list[2]))))=0)
    and (imagpart(float(rectform(rhs(point_list[1]))))=0)
    and (imagpart(float(rectform(rhs(point_list[2]))))=0)
   then
   (
    kill(x1),kill(x2),
    out:errcatch (x1:rhs(point_list[1]),y1:rhs(point_list[2]),f(x1,y1),
    tempderx:diff(f(x,y),x),tempdery:diff(f(x,y),y),
    ev(tempderx,x=x1,y=y1),
    ev(tempdery,x=x1,y=y1),
    if (imagpart(ratsimp(rectform(f(x1,y1))))#0) then error("not in domain"),
    [x1,y1])
   ),
  print (out),
  if out=[] then out else out[1]
);


/*  function test_point  */
/*  tests that the point is stationary point and belongs to the domain of f(x,y) */
test_point(point_list):=
block([temp_err,tempder],
print ("aaaaa",point_list),
tempderx:diff(f(x,y),x),
if ev(fullratsimp(tempderx),x=point_list[1],y=point_list[2]) # 0 then return(false),
tempdery:diff(f(x,y),y),
if ev(fullratsimp(tempdery),x=point_list[1],y=point_list[2]) # 0 then return(false),
temp_err:errcatch 
 (
  ev(ratsimp(f(x,y)),x=point_list[1],y=point_list[2]),
  float(ev(ratsimp(f(x,y)),x=point_list[1],y=point_list[2])),
  ev(tempderx,x=point_list[1],y=point_list[2]),
  ev(tempdery,x=point_list[1],y=point_list[2])
 ),
if temp_err=[] then return(false),
true
);

kill(out);

stat_point_computed:disjoin(out[1],disjoin([],setify(map(find_point,solve([diff(f(x,y),x),diff(f(x,y),y)],[x,y])))));

print (keyprint,stat_point_computed,keyprint);

if listp(user_points) then
(
if setify(map(test_point,user_points))#{true} then print("bad_stationary_points") else print ("stationary_points_OK")
);

